/*!
 * Gulp Front-End Starter Kit
 * Performing repetitive tasks like minification, compass sass compilation, linting, making your job easier.
 * http://aindevonsire.com
 * @author Ian Pansensoy
 * @version 0.1.5
 * Copyright 2015. MIT licensed.
 */
/* ToDo: add flex-grow, flex-shrink, flex-basis, flex-flow, align-items, align-self, justify-content mixins */
/*
*   @description
*   Generates border radius for a given element
*   @example
*  .selector {
*       @include border-radius(5px);
*   }
*/
/*
*   @description
*   Generates opacity for a given element
*   @example
*  .selector {
*       @include opacity(5px);
*   }
*/
/*
*   @description
*   Generates box shadow for a given element
*   @example
*  .selector {
*       @include box-shadow(5px 5px 10px 5px #aaa);
*   }
*/
/*
*   @description
*   Generates text shadow for a given element
*   @example
*  .selector {
*       @include text-shadow(5px 5px 10px 5px #aaa);
*   }
*/
/*
 * @description
 * Generates a linear gradient for a given element with a fallback color.
 * @example
 *   .selector {
 *     @include linear-gradient("to bottom", #ccc, #ddd, #bbb);
 *   }
 */
/*
 * @description
 * Generates `placeholder` content for a given element
  * @example
 *   .selector {
 *     @include x-placeholder {
 *         color: #bada55;
 *         font-weight: bold;
 *     }
 *   }
 */
/*
 * @description
 * Generates cross-browser-compatible `transform` for a given element
 * @example
 *   .selector {
 *     @include x-transform(rotate(1deg));
 *   }
 */
/*
 * @description
 * Generates cross-browser-compatible `transition` output for a given element.
 * @example
 *   .selector {
 *     @include x-transition(background 0.3s ease-in);
 *   }
 */
/*
Icon classes can be used entirely standalone. They are named after their original file names.

```html
<!-- `display: block` sprite -->
<div class="icon-home"></div>

<!-- `display: inline-block` sprite -->
<img class="icon-home" />
```
*/
.icon-sprite-asterisk {
  background-image: url(app/assets/img/sprites.png);
  background-position: -31px 0px;
  width: 30px;
  height: 32px; }

.icon-sprite-fb-icon {
  background-image: url(app/assets/img/sprites.png);
  background-position: 0px 0px;
  width: 31px;
  height: 32px; }

.icon-sprite-insta-icon {
  background-image: url(app/assets/img/sprites.png);
  background-position: -61px 0px;
  width: 30px;
  height: 32px; }

.icon-sprite-twitter-icon {
  background-image: url(app/assets/img/sprites.png);
  background-position: 0px -32px;
  width: 30px;
  height: 32px; }

.marketing img {
  display: inline-block; }

.browsehappy {
  margin: 0.2em 0;
  background: #ccc;
  color: #fff;
  padding: 0.2em 0; }

body {
  padding-top: 20px;
  padding-bottom: 20px; }

/* Everything but the jumbotron gets side spacing for mobile first views */
.header,
.marketing,
.footer {
  padding-left: 15px;
  padding-right: 15px; }

/* Custom page header */
.header {
  border-bottom: 1px solid #e5e5e5;
  /* Make the masthead heading the same height as the navigation */ }
  .header h3 {
    margin-top: 0;
    margin-bottom: 0;
    line-height: 40px;
    padding-bottom: 19px; }

/* Custom page footer */
.footer {
  padding-top: 19px;
  color: #777;
  border-top: 1px solid #e5e5e5;
  padding: 0.2em 0; }

.container-narrow > hr {
  margin: 30px 0; }

.jumbotron {
  text-align: center;
  border-bottom: 1px solid #e5e5e5; }
  .jumbotron .btn {
    font-size: 21px;
    padding: 14px 24px; }

/* Supporting marketing content */
.marketing {
  margin: 40px 0; }
  .marketing p + h4 {
    margin-top: 28px; }

/* Responsive: Portrait tablets and up */
@media screen and (min-width: 768px) {
  .container {
    min-width: 1174; }
  /* Remove the padding we set earlier */
  .header,
  .marketing,
  .footer {
    padding-left: 0;
    padding-right: 0; }
  /* Space out the masthead */
  .header {
    margin-bottom: 30px; }
  /* Remove the bottom border on the jumbotron for visual effect */
  .jumbotron {
    border-bottom: 0; } }

/*# sourceMappingURL=data:application/json;base64, */